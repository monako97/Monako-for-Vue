/***/

// 22.1.3.31 Array.prototype[@@unscopables]

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

// cross-realm fallback

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

// getting tag from 19.1.3.6 Object.prototype.toString()

/* empty */

// eslint-disable-line no-undef

// optional / simple context binding

// 7.2.1 RequireObjectCoercible(argument)

// Thank's IE8 for his funny defineProperty

// IE 8- don't enum bug keys

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

// 21.2.5.3 get RegExp.prototype.flags

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

// check on default Array iterator

// 7.2.2 IsArray(argument)

// 7.2.8 IsRegExp(argument)

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

// eslint-disable-next-line no-throw-literal

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

// Don't enum bug & hidden keys

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

// true  -> String#at

// false -> String#codePointAt

// helper for String#{startsWith, endsWith, includes}

// https://tc39.github.io/ecma262/#sec-toindex

// 7.1.4 ToInteger

// to indexed object, toObject with fallback for non-array-like ES3 strings

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

// 7.1.13 ToObject(argument)

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

// 19.1.3.6 Object.prototype.toString()

// 21.2.5.3 get RegExp.prototype.flags()

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

//

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

// 21.2.5.14 RegExp.prototype.toString()

// B.2.3.10 String.prototype.link(url)

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* , position = 0 */

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

// Find the global object for export to both the browser and web workers.

// Setup highlight.js for different environments. First is Node.js or

// CommonJS.

// Convenience variables for build-in objects

// Global internal variables used within the highlight.js library.

/* Utility functions */

// language-* takes precedence over non-prefixed class names.

// inherit(parent, override_obj, override_obj, ...)

/* Stream merging */

// Prevent void elements from having an end tag that would actually

// double them in the output. There are more void elements in HTML

// but we list only those realistically expected in code display.

/*
      To avoid starting the stream just before it should stop the order is
      ensured that original always starts first and closes last:
       if (event1 == 'start' && event2 == 'start')
        return original;
      if (event1 == 'start' && event2 == 'stop')
        return highlighted;
      if (event1 == 'stop' && event2 == 'start')
        return original;
      if (event1 == 'stop' && event2 == 'stop')
        return highlighted;
       ... which is collapsed to:
      */

/*
        On any opening or closing tag of the original markup we first close
        the entire highlighted node stack, then render the original tag along
        with all the following original tags at the same offset and then
        reopen all the tags on the highlighted stack.
        */

/* Initialization */

// joinRe logically computes regexps.join(separator), but fixes the

// backreferences so they continue to match.

// backreferenceRe matches an open parenthesis or backreference. To avoid

// an incorrect parse, it additionally matches the following:

// - [...] elements, where the meaning of parentheses and escapes change

// - other escape sequences, so we do not misparse escape sequences as

//   interesting elements

// - non-matching or lookahead parentheses, which do not capture. These

//   follow the '(' with a '?'.

// Adjust the backreference.

// string

/*
  Core highlighting function. Accepts a language name, or an alias, and a
  string with the code to highlight. Returns an object with the following
  properties:
   - relevance (int)
  - value (an HTML string with highlighting markup)
   */

// Counting embedded language score towards the host language may be disabled

// with zeroing the containing mode relevance. Usecase in point is Markdown that

// allows XML everywhere and makes every XML snippet to have a much larger Markdown

// score.

/*
      Parser should not reach this point as all types of lexemes should be caught
      earlier, but if it does due to some bug make sure it advances at least one
      character forward to prevent infinite looping.
      */

// keep continuations for sub-languages

// close dangling modes

/*
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:
   - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - second_best (object with the same structure for second-best heuristically
    detected language, may be absent)
   */

/*
  Post-processing of the highlighted markup:
   - replace TABs with something more useful
  - replace real line-breaks with '<br>' for non-pre containers
   */

/*
  Applies highlighting to a DOM node containing code. Accepts a DOM node and
  two optional parameters for fixMarkup.
  */

/*
  Updates highlight.js global options with values passed in the form of an object.
  */

/*
  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
  */

/*
  Attaches highlighting to the page load event.
  */

/* Interface definition */

// Common regexps

// 0x..., 0..., decimal, float

// 0b...

// Common modes

// excludes method names from keyword processing

// общий паттерн для определения идентификаторов

// v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword

// IP

// Other numbers

// Requests

// Dates

// Strings

// We try to support full Ada2012

// We highlight all appearances of types, keywords, literals (string, char, number, bool)

// and titles (user defined function/procedure/package)

// CSS classes are set accordingly

// Languages causing problems for language detection:

// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)

// sql (ada default.txt has a lot of sql keywords)

// Regular expression for Ada numeric literals.

// stolen form the VHDL highlighter

// Decimal literal:

// TODO: These spaces are not required by the Ada syntax

// however, I have yet to see handwritten Ada code where

// someone does not put spaces around :

// endsWithParent: true,

// returnBegin: true,

// workaround to avoid highlighting

// named loops and declare blocks

// properly highlight all modifiers

// strings "foobar"

// characters ''

// character literals always contain one char

// number literals

// Attributes

// package definition, maybe inside generic

// function/procedure declaration/definition

// maybe inside generic

// we need to re-match the 'function' keyword, so that

// the title mode below matches only exactly once

// name of the function/procedure

// 'self'

// // parameter types

// return type

// we are done with functions

// new type declarations

// see comment above the definition

// avoid close detection with C# and JS

// 'strings'

// "strings"

// """heredoc strings"""

// single-line comments

// comment blocks

// interface or namespace declaration

// interface or namespace name

// class declaration

// class name

// built-in types

// object handles

// literals

// numbers

// keywords aren’t needed for highlighting per se, they only boost relevance

// for a very generally defined mode (starts with a word, ends with line-end

// object attr container

// "value" container

//local labels: %?[FB]?[AT]?\d{1,2}\w+

//GNU preprocs

//legal postfixes

//hex

//bin

//literal

//ARM syntax

//GNU ARM syntax

// block comment

// can also be done as...

//'^/{4,}$',

// line comment

// title

// example, admonition & sidebar blocks

// headings

// document attributes

// block attributes

// quoteblocks

// listing and literal blocks

// passthrough blocks

// lists (can only capture indicators)

// admonition

// inline strong

// must not follow a word character or be followed by an asterisk or space

// allow escaped asterisk followed by word char

// inline emphasis

// must not follow a word character or be followed by a single quote or space

// allow escaped single quote followed by word char

// inline emphasis (alt)

// must not follow a word character or be followed by an underline or space

// inline smart quotes

// inline code snippets (TODO should get same treatment as strong and emphasis)

// indented literal block

// horizontal rules

// images and links

// eat up @'s in emails to prevent them to be recognized as doctags

// AspectJ Constructs

// this prevents 'new Name(...), or throw ...' from being recognized as a function definition

// the function class is a bit different for AspectJ compared to the Java language

// annotation is also used in this language

// FIXED

// consecutive commas, not for highlighting but just for relevance

// begin: '@',

// end: '$',

// keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',

// relevance: 5

/* mnemonic */

/* general purpose registers */

// 0x..., decimal, float

// подстановка в «.macro»

// Shell built-ins

// http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html

// Support explicitely typed variables that end with $%! or #.

// Match line numbers

// Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)

// Match hexadecimal numbers (&Hxxxx)

// Match octal numbers (&Oxxxxxx)

// Attribute

// Specific

// Common

// this mode works as the only relevance counter

// not a string technically but makes sense to be highlighted in the same style

// 2.3. Identifiers and keywords

// verbatim string

// string literal or template

// character literal

// numeric literal

// 7.4.1 Declaration Modifiers

// compiler annotation

// Clojure keywords

// scripting commands

// JS keywords

// JS literals

// a number tries to eat the following slash to prevent treating it as a regexp

// regex can't start with space to parse x / 2 / 3 as two divisions

// regex can't start with *, and it supports an "illegal" in the main mode

/* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */

// anonymous function start

// registered function - no need in them due to all functions are highlighted,

// but I'll just leave this here.

//"$bit", "$bitcount",

//"$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",

//"$compile", "$data", "$decimal", "$double", "$extract", "$factor",

//"$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",

//"$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",

//"$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",

//"$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",

//"$locate", "$match", "$method", "$name", "$nconvert", "$next",

//"$normalize", "$now", "$number", "$order", "$parameter", "$piece",

//"$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",

//"$query", "$random", "$replace", "$reverse", "$sconvert", "$select",

//"$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",

//"$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",

//"$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",

//"$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",

//"$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",

//"$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",

//"$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",

//"$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",

//"$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",

//"$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",

//"$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",

//"$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",

//"$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",

//"$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",

//"$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",

//"device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",

//"$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",

//"$storage", "$system", "$test", "$this", "$tlevel", "$username",

//"$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",

//"$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",

//"$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",

//"$ztrap", "$zversion"

// escaped

// Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)

// Macro command: quit $$$OK

// Special (global) variables: write %request.Content; Built-in classes: %Library.Integer

// Global variable: set ^globalName = 12 write ^globalName

// Some control constructions: do ##class(Package.ClassName).Method(), ##super()

// sub-languages: are not fully supported by hljs by 11/15/2015

// left for the future implementation.

// this brakes first and last tag, but this is the only way to embed a valid html

// This mode covers expression context where we can't expect a function

// definition and shouldn't highlight anything that looks like one:

// `return some()`, `else if()`, `(x*sum(1, 2))`

// Count matching parentheses.

// skip generic stuff

// without EXPANSION

// Normal keywords.

// [Attributes("")]

// Expression keywords prevent 'keyword Name(...)' from being

// recognized as a function definition

// at_rule eating first "{" is a good thing

// because it doesn’t let it to be parsed as

// a rule set but instead drops parser into

// the default mode which is how it should be.

// break on Less variables @var: ...

/**
* Known issues:
*
* - invalid hex string literals will be recognized as a double quoted strings
*   but 'x' at the beginning of string will not be matched
*
* - delimited string literals are not checked for matching end delimiter
*   (not possible to do with js regexp)
*
* - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
*   also, content of token string is not validated to contain only valid D tokens
*
* - special token sequence rule is not strictly following D grammar (anything following #line
*   up to the end of line is matched as special token sequence)
*/

/**
   * Language keywords
   *
   * @type {Object}
   */

/**
   * Number literal regexps
   *
   * @type {String}
   */

// dart:core

// IPv6

// IPv4

// terminals

// the mode is ended by the title

// regexp container

// TODO: other constructors (built-in, infix).

// Top-level constructions.

// built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188

/* matches a beginning equal sign found in Excel formula examples */

/* only allow single equal sign at front of line */

/* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */

/* matches a reference to a single cell */

/* matches a reference to a range of cells */

/* Excel formula comments are done by putting the comment in a function call to N() */

// monad builder keywords (matches before non-bang kws)

// One-line quoted comment string

// Parameter/set/variable description text

// Declarations

// table environment

// table header row

// Function definitions

// Function title

// dots

// these are explicitly named internal function calls

//className: "fn_ref",

// ambiguously named function calls get a relevance of 0

//className: "fn_ref_params",

// language is case-insensitive

//end: /\(/,

// custom method guard

// Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.

// However, most prefer all uppercase and uppercase is customary.

// Statements

// Constants

// highlight map keys and named parameters as strings

// catch middle element of the ternary operator

// to avoid highlight it as a label, named parameter, or map key

// highlight labeled statements

// TODO support filter tags like :javascript, support inline HTML

// FIXME these comments should be allowed to span indented lines

// TODO: other constructors (build-in, infix).

// "Whitespaces".

// Literals and names.

// TODO: characters.

// interpolate-able strings

// interpolation

// compiler meta

// compiler conditionals

// function types

// types

// instantiation

// enums

// abstracts

// classes

// multi-line string

// pre-processor

// label

// keywords

// Some keywords more or less unique to I7, for relevance.

// kind:

// Rule definition

// This is here for relevance.

//Rule name

// Определение идентификаторов

// Определение имен функций

// E4X / JSX

// ES6 class

// module

// inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents

// end the highlighting if we are on a new line and the line does not have at

// least six spaces in the beginning

// jldoctest Markdown blocks are used in the Julia manual and package docs indicate

// code snippets that should be verified when the documentation is built. They can be

// either REPL-like or script-like, but are usually REPL-like and therefore we apply

// julia-repl highlighting to them. More information can be found in Documenter's

// manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html

// Since there are numerous special names in Julia, it is too much trouble

// to maintain them by hand. Hence these names (i.e. keywords, literals and

// built-ins) are automatically generated from Julia v0.6 itself through

// the following scripts for each.

// # keyword generator, multi-word keywords handled manually below

// foreach(println, ["in", "isa", "where"])

// for kw in Base.REPLCompletions.complete_keyword("")

//     if !(contains(kw, " ") || kw == "struct")

//         println(kw)

//     end

// end

// # literal generator

// println("true")

// println("false")

// for name in Base.REPLCompletions.completions("", 0)[1]

//     try

//         v = eval(Symbol(name))

//         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)

//             println(name)

//         end

// # built_in generator:

//         if v isa Type || v isa TypeVar

// ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names

// supported numeric literals:

//  * binary literal (e.g. 0x10)

//  * octal literal (e.g. 0o76543210)

//  * hexadecimal literal (e.g. 0xfedcba876543210)

//  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)

//  * decimal literal (e.g. 9876543210, 100_000_000)

//  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)

// Can't use built-in modes easily, as we want to use STRING in the meta

// context as 'meta-string' and there's no syntax to remove explicitly set

// classNames in built-in modes.

// remove 'trait' when removed from KEYWORDS

// variables

// markup

// not implemented in the language

// Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)

// used only to properly balance nested parens inside mixin call, def. arg list

// yes, Less identifiers may begin with a digit

// generic Less highlighter (used almost everywhere except selectors):

// fixme: it does not include dot for numbers like .5em :(

// inline javascript (or whatever host language) *multiline* string

// @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):

// using more strict pattern for higher relevance to increase chances of Less detection.

// this is *the only* Less specific statement used in most of the sources, so...

// (we’ll still often loose to the css-parser unless there's '//' comment,

// simply because 1 variable just can't beat 99 properties :)

// first parse unambiguous selectors (i.e. those not starting with tag)

// then fall into the scary lookahead-discriminator variant.

// this mode also handles mixin definitions and calls

// otherwise it’s identified as tag

// '%' for more consistent coloring of @keyframes "tags"

// argument list of parametric mixins

//lexemes: '[.%]?' + hljs.IDENT_RE,

// Double quote string

// Double-quoted string

//Metatags and globals:

/* Variables: simple (eg $(var)) and special (eg $@) */

/* Quoted string with variables inside */

// highlight headers

// inline html

// lists (indicators only)

// strong segments

// emphasis segments

// blockquotes

// code snippets

// using links - title and link

/*
Formal syntax is not published, helpful link:
https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf
*/

// float number w/ exponent

// hmm, I wonder if we ought to include other exponent markers?

// bigfloat number

// float number w/out exponent

// Doesn't seem to recognize floats which start with '.'

// integer in base up to 36

// Doesn't seem to recognize integers which end with '.'

// eats variables

// pragma

//GNU MIPS syntax

// numbered local labels

// mojolicious line

// mojolicious block

// Moonscript keywords

// function: -> =>

// table

// Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html

// Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html

// Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html

// this swallows entire URLs to avoid detecting numbers within

// regexp locations (~, ~*)

// *.example.com

// sub.example.*

// units

// Actually pragma

// ${defines}

// $variables

// $(language_strings)

// $\n, $\r, $\t, $$

// !compiler_flags

// command parameters

// plug::ins

/* missing support for heredoc-like string (OCaml 4.0.2+) */

/* built-in types */

/* type variable */

/* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */

/* polymorphic variant */

/* module or constructor */

/* don't color identifiers, but safely catch all identifiers with '*/

//adds 1e5, 1e-10

/* block match pass are "actions" in pf.conf(5), the rest are
       * lexically similar top-level commands.
       */

// https://www.postgresql.org/docs/11/static/datatype.html

// https://www.postgresql.org/docs/11/static/functions-aggregate.html

// Forbid some cunstructs from other languages to improve autodetect. In fact

// "[a-z]:" is legal (as part of array slice), but improbabal.

// special handling of some words, which are reserved only in some contexts

// functions named as keywords, followed by '('

// INCLUDE ( ... ) in index_parameters in CREATE TABLE

// not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)

// disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE

// and in PL/pgSQL RAISE ... USING

// PG_smth; HAS_some_PRIVILEGE

//className: 'built_in',

// extract

//built_in: 'EXTRACT',

// xmlelement, xmlpi - special NAME

//built_in: 'XMLELEMENT XMLPI',

// xmlparse, xmlserialize

//built_in: 'XMLPARSE XMLSERIALIZE',

// Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and

// nearest following numeric constant. Without with trick we find a lot of "keywords"

// in 'avrasm' autodetection test...

// WITH|WITHOUT TIME ZONE as part of datatype

// INTERVAL optional fields

// Pseudo-types which allowed only as return type

// Known functions - only when followed by '('

// Types

// in XMLTABLE

// hopefully no one would use PATH type in XMLTABLE...

// Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS

// actually we want them all except SQL; listed are those with known implementations

// and XML + JSON just in case

// identifiers in quotes

// comments

// PL/pgSQL staff

// %ROWTYPE, %TYPE, $n

// %TYPE, %ROWTYPE

// $n

// <<labeles>>

// swallow composed identifiers to avoid parsing them as keywords

/**
   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify
   * highlighting and fix cases like
   * ```
   * interface Iterator[A: A]
   *   fun has_next(): Bool
   *   fun next(): A?
   * ```
   * where it is valid to have a function head without a body
   */

/* single-line comment */

/* multi-line comment */

/* no paramater help tags */

/* one parameter help tags */

// relevance booster

// 0'a etc.

// whitespaces: space, tab, formfeed

// skip DELIM

// value: everything until end of line (again, taking into account backslashes)

// key: everything until whitespace or = or : (taking into account backslashes)

// case of a "normal" key

// case of key containing non-alphanumeric chars => relevance = 0

// case of an empty key

/* language keywords */

/* metaparameters */

/* core facts */

// Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;

// PB IDE color: #006666 (Blue Stone) + Bold

// The following keywords list was taken and adapted from GuShH's PureBasic language file for GeSHi...

// COMMENTS | PB IDE color: #00AAAA (Persian Green)

// PROCEDURES DEFINITIONS

// PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold

// PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)

// PB IDE color: #0080FF (Azure Radiance)

// PB IDE color: #924B72 (Cannon Pink)

//  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"

// template string

// hex value

// explicit integer

// number with trailing decimal

// number

// number with leading decimal

// escaped identifier

// Facet sections

// Instance sections

// Component sections

// Comments

// Colors from RouterOS terminal:

//   green        - #0E9A00

//   teal         - #0C9A9A

//   purple       - #99069A

//   light-brown  - #9A9900

// Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.

//////////////////////////////////////////////////////////////////////

// недопустимые конструкции

// dns

// -- comment

// Monkey one line comment

// jboss-cli

// Stan comment

// F# class declaration?

// HTML tags

// roboconf - лютый костыль )))

// attribute=value

/*{
          // IPv4 addresses and subnets
          className: 'number',
          variants: [
            {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
            {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
            {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
          ]
        }, // */

/*{
          // MAC addresses and DHCP Client IDs
          className: 'number',
          begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
        }, //*/

// Не форматировать не классифицированные значения. Необходимо для исключения подсветки значений как built_in.

// className: 'number',  

//*/

// HEX values

//'function',

// \B in the beginning suppresses recognition of ?-sequences where ?

// is the last character of a preceding identifier, as in: `func?4`

// swallow namespace qualifiers before symbols

// looks like #-comment

// functions

// SAS is case-insensitive

// Distinct highlight for proc <proc>, data, run, quit

// Macro variables

// Special emphasis for datalines|cards

// Built-in macro variables take precedence

// User-defined macro functions highlighted after

// used in strings for escaping/interpolation/substitution

// Scilab has more than 2000 functions. Just list the most commons

// begin: IDENT_RE, end: '[,|\\s]'

// only 6

// This looks more complicated than needed to avoid combinatorial

// explosion under V8. It effectively means `| var1 var2 ... |` with

// whitespace adjacent to `|` being optional.

/* according to Definition of Standard ML 97  */

/* built-in types according to basis library */

// In SQF, a variable start with _

// Stan's keywords

// Stan's probablity distributions (less beta and gamma, as commonly

// used for parameter names). So far, _log and _rng variants are not

// included

// Stan's data types

// Stan's model blocks

// The below is all taken from the R language definition

// STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.

// monkey

// vbscript

// gradle

// a whole lot of languages

// markdown

// strings

// hex colors

// class tag

// id tag

// tags

// psuedo selectors

// @ keywords

// dimension

//  - only from beginning of line + whitespace

// attributes

//  - must have whitespace after it

// value container

// @attributes

// version of format and total amount of testcases

// YAML block

// testcase number

// testcase status and description

// because it looks like attributes in HTML tags

/* no leading zeros */

/* for pos section at bottom */

/* this is for cases like ,CALL */

/* this is for cases like CNT100 where the default lexemes do not
       * separate the keyword and the number */

/* to catch numbers that do not have a word boundary on the left */

// prevent references like module.id from being higlighted as module definitions

// Value types

/* t-x */

/* s-u */

/* reserved deprecated keywords */

/* parameters to instances */

// return

// VHDL-2008 block commenting.

// express version except: ! & * < = > !! # @ @@

//built in func

/*
    A double quote can start either a string or a line comment. Strings are
    ended before the end of a line by another double quote and can contain
    escaped double-quotes and post-escaped line breaks.
     Also, any double quote at the beginning of a line is a comment but we
    don't handle that properly at the moment: any double quote inside will
    turn them into a string. Handling it properly will require a smarter
    parser.
    */

// Instruction pointer

// Float number and x87 BCD

// Hex number in $

// Number in H,D,T,Q,O,B,Y suffix

// Number in X,D,T,Q,O,B,Y prefix

// Single-quoted string

// Backquoted string

// Global label and local label

// Macro-local label

// Macro parameter

// We don't want the php closing tag ?> to close the PHP block when

// inside any of the following blocks:

/*
      The lookahead pattern (?=...) ensures that 'begin' only matches
      '<style' as a single word, followed by a whitespace or an
      ending braket. The '$' is needed for the lexeme to be recognized
      by hljs.subMode() that tests lexemes outside the stream.
      */

// See the comment in the <style tag about the lookahead pattern

// see https://www.w3.org/TR/xquery/#id-terminal-delimitation

// do not highlight inbuilt strings as variable or xml element names

// Node Types (sorted by inheritance)

// atomic types (sorted by inheritance)

// jinja templates Ansible

// multi line string

// very simple termination: next hash key

// Ruby/Rails erb

// local tags

// data type

// fragment id &ref

// fragment reference *ref

// array listing

////////////////////////////////////////////////////////////////////////////////

// Helpers

// Merge objects

/*from1, from2, from3, ...*/

// compile lazily, because "host"-containing variables can change on tlds update.

// Don't allow single-level domains, because of false positives like '//test'

// with code comments

// should not be `://` & `///`, that protects from errors in protocol name

/*eslint-disable max-len*/

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)

// Schemas compiler. Build regexps.

// Load & clone RE patterns.

// Define dynamic patterns

// Compile each schema

// Reset compiled data

// skip disabled methods

// Compile postponed aliases

// Fake record for guessed links

// Build schema condition

// Filter disabled & fake schemas

// (?!_) cause 1.5x slowdown

// Cleanup

/*eslint-enable max-len*/

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/

/**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/

/**
   * Match#index -> Number
   *
   * First position of matched string.
   **/

/**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/

/**
   * Match#raw -> String
   *
   * Matched string.
   **/

/**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/

/**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/

/**
 * class LinkifyIt
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/

// Cache last tested result. Used to skip repeating steps on next `match` call.

// Next scan position

/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/

/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/

/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/

// Reset scan cache

// try to scan for link with schema - that's the most simple rule

// guess schemaless links

/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/

/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/

// If not supported schema check requested - terminate

/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/

// Try to take previous element from cache, if .test() called before

// Cut head if cache was used

// Scan string until end reached

/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/

// Do minimal possible changes by default. Need to collect feedback prior

// to move forward https://github.com/markdown-it/linkify-it/issues/1

/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/

// Use direct extract instead of `regenerate` to reduse browserified size

// \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)

// \p{\Z\Cc} (white spaces + control)

// Experimental. List of chars, completely prohibited in links

// because can separate it from other part of text

// All possible word characters (everything without punctuation, spaces & controls)

// Defined via punctuation & spaces to save space

// Should be something like \p{\L\N\S\M} (\w but without `_`)

// The same as abothe but without [0-9]

// var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

// Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.

// More to read about domain names

// http://serverfault.com/questions/638260/

// Allow letters & digits (http://test1)

/*_root*/

// Main rules

// Rude test fuzzy links by host, for quick deny

// Fuzzy link can't be prepended with .:/\- and non punctuation.

// but can start with > (markdown blockquote)

/* harmony default export */

// Insert each marker as a separate text token, and add it to delimiter list

/* = */

// Walk through delimiter list and replace text tokens with tags

// If a marker sequence has an odd number of characters, it's splitted

// like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the

// start of the sequence.

// So, we have to move all those markers after subsequent s_close tags.

// Process ^superscript^

// same as UNESCAPE_MD_RE plus a space

/* ^ */

// don't run any pairs in validation mode

// don't allow unescaped spaces/newlines inside

// found!

// HTML5 entities map: { name -> utf16string }

/*eslint quotes:0*/

// List of valid html blocks names, accorting to commonmark spec

// http://jgm.github.io/CommonMark/spec.html#html-blocks

// Regexps to match html elements

// Utilities

/*eslint no-bitwise:0*/

// broken sequence

// never used

// control codes

// Currently without astral characters support.

// Re-export libraries commonly used in both markdown-it and its plugins,

// so plugins won't have to depend on them explicitly, which reduces their

// bundled size (e.g. a browser build).

// Remove element from array and put another array at those position.

// Useful for some operations with tokens

/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/

/* # */

// exports.replaceEntities     = replaceEntities;

// Zs (unicode class) || [\t\f\v\r\n]

// \t

// \n

// \v

// \f

// \r

// Markdown ASCII punctuation characters.

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// http://spec.commonmark.org/0.15/#ascii-punctuation-character

// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.

/* ! */

/* " */

/* $ */

/* % */

/* & */

/* ' */

/* ( */

/* ) */

/* * */

/* + */

/* , */

/* - */

/* . */

/* / */

/* : */

/* ; */

/* < */

/* > */

/* ? */

/* @ */

/* [ */

/* \ */

/* ] */

/* _ */

/* ` */

/* { */

/* | */

/* } */

/* ~ */

// Hepler to unify [reference labels].

// use .toUpperCase() instead of .toLowerCase()

// here to avoid a conflict with Object.prototype

// members (most notably, `__proto__`)

// Just a shortcut for bulk export

// Parse link destination

/* \n */

// no closing '>'

// this should be ... } else { ... branch

// Parse link label

// this function assumes that first character ("[") already matches;

// returns the end of the label

// increase level if we find text `[`, which is not a part of any token

// restore old state

// Parse link title

// if opening marker is "(", switch it to closing marker ")"

// Main parser class

// url should be normalized at this point, and existing entities are decoded

/**/

/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(lang, str, true).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(lang, str, true).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/

/**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/

/**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/

/**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/

/**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/

/**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/

// Expose utils & helpers for easy acces from plugins

/**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/

/**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/

/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/

/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you with - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/

/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/

/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/

/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/

/*, params, ... */

/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and returns list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/

/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/

/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/

/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/

/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/

// First 2 params - rule name & source. Secondary array - list of rules,

// which can be terminated by this one.

/**
 * new ParserBlock()
 **/

/**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/

// Generate tokens for input range

// If nesting level exceeded - skip tail to the end. That's not ordinary

// situation and we should not care about content.

// Try all possible rules.

// On success, rule should:

// - update `state.line`

// - update `state.tokens`

// - return true

// set state.tight if we had an empty line before current tag

// i.e. latest empty line should not count

// paragraph might "eat" one newline after it in nested lists

/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/

/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/

/**
 * new Core()
 **/

/**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/

/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/

/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/

// Parser rules

/**
 * new ParserInline()
 **/

/**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/

/**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/

// Skip single token by running all rules in validation mode;

// returns `true` if any rule reported success

// Increment state.level and decrement it later to limit recursion.

// It's harmless to do here, because no tokens are created. But ideally,

// we'd need a separate private state variable for this purpose.

// Too much nesting, just skip until the end of the paragraph.

// NOTE: this will cause links to behave incorrectly in the following case,

//       when an amount of `[` is exactly equal to `maxNesting + 1`:

//       [[[[[[[[[[[[[[[[[[[[[foo]()

// TODO: remove this workaround when CM standard will allow nested links

//       (we can replace it by preventing links from being parsed in

//       validation mode)

// - update `state.pos`

/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/

// Commonmark default options

// Enable HTML tags in source

// Use '/' to close single tags (<br />)

// Convert '\n' in paragraphs into <br>

// CSS language prefix for fenced blocks

// autoconvert URL-like texts to links

// Enable some language-neutral replacements + quotes beautification

// Double + single quotes replacement pairs, when typographer enabled,

// and smartquotes on. Could be either a String or an Array.

// For example, you can use '«»„“' for Russian, '„“‚‘' for German,

// and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).

/* “”‘’ */

// Highlighter function. Should return escaped HTML,

// or '' if the source string is not changed and should be escaped externaly.

// If result starts with <pre... internal wrapper is skipped.

// function (/*str, lang*/) { return ''; }

// markdown-it default options

// "Zero" preset, with nothing enabled. Useful for manual configuring of simple

// modes. For example, to parse bold/italic only.

/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/

/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/

/**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/

/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/

// If language exists, inject class gently, without modifying original token.

// May be, one day we will add .clone() for token and simplify this part, but

// now we prefer to keep things local.

// Fake token just to render attributes

// "alt" attr MUST be set, even if empty. Because it's mandatory and

// should be placed on proper position for tests.

// Replace content with actual value

/*, env */

/*, options, env */

/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/

// Tight list paragraphs

// Insert a newline between hidden paragraph and subsequent opening

// block-level tag.

// For example, here we should insert a newline before blockquote:

//  - a

//    >

// Add token name, e.g. `<img`

// Encode attributes, e.g. `<img src="foo"`

// Add a slash for self-closing tags, e.g. `<img src="foo" /`

// Check if we need to add a newline after this tag

// Block-level tag containing an inline tag.

// Opening tag + closing tag of the same type. E.g. `<li></li>`.

/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to renter
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/

/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to renter
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/

/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to renter
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/

/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * new Ruler()
 **/

// List of added rules. Each element is:

// {

//   name: XXX,

//   enabled: Boolean,

//   fn: Function(),

//   alt: [ name2, name3 ]

// }

// Cached rule chains.

// First level - chain name, '' for default.

// Second level - diginal anchor for fast filtering by charcodes.

// Helper methods, should not be used directly

// Find rule index by name

// Build rules lookup cache

// collect unique names

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/

// Search by name and enable

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/

/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/

// Search by name and disable

/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/

// Chain can be empty, if rules disabled. But we still have to return Array.

// Block quotes

// if it's indented more than 3 spaces, it should be a code block

// check the block quote marker

// we know that it's going to be a valid blockquote,

// so no point trying to find the end of it in silent mode

// skip spaces after ">" and re-calculate offset

// skip one optional space after '>'

/* space */

// ' >   test '

//     ^ -- position start of line here:

/* tab */

// '  >\t  test '

//       ^ -- position start of line here (tab has width===1)

// Search the end of the block

// Block ends with either:

//  1. an empty line outside:

//     ```

//     > test

//  2. an empty line inside:

//     >

//     test

//  3. another tag:

//      - - -

// check if it's outdented, i.e. it's inside list item and indented

// less than said list item:

// ```

// 1. anything

//    > current blockquote

// 2. checking this line

// Case 2: line is not inside the blockquote, and the last line was empty.

// Case 3: another tag found.

// Quirk to enforce "hard termination mode" for paragraphs;

// normally if you call `tokenize(state, startLine, nextLine)`,

// paragraphs will look below nextLine for paragraph continuation,

// but if blockquote is terminated by another tag, they shouldn't

// state.blkIndent was non-zero, we now set it to zero,

// so we need to re-calculate all offsets to appear as

// if indent wasn't changed

// A negative indentation means that this is a paragraph continuation

// This line is inside the blockquote.

// Restore original tShift; this might not be necessary since the parser

// has already been here, but just to make sure we can do that.

// Code block (4 spaces padded)

/*, silent*/

// fences (``` lang, ~~~ lang)

// scan marker length

// Since start is found, we can report success here in validation mode

// search end of block

// make sure tail has spaces only

// If a fence has heading spaces, they should be removed from its inner block

// heading (#, ##, ...)

// count heading level

// Let's cut tails like '    ###  ' from the end of string

// #

// Horizontal rule

// Check hr marker

// markers can be mixed with spaces, but there should be at least 3 of them

// HTML block

// true if this sequence can be a terminator, false otherwise

// If we are here - we detected HTML block.

// Let's roll down till block end.

// lheading (---, ===)

// use paragraph to match terminatorRules

// jump line-by-line until empty one or EOF

// this would be a code block normally, but after paragraph

// it's considered a lazy continuation regardless of what's there

// Check for underline in setext header

// quirk for blockquotes, this line should already be checked by that rule

// Some tags can terminate paragraph without empty line.

// Lists

// Search `[-+*][\n ]`, returns next pos after marker on success

// or -1 on fail.

// Check bullet

// Search `\d+[.)][\n ]`, returns next pos after marker on success

// List marker should have at least 2 chars (digit + dot)

/* 0 */

/* 9 */

// EOL -> fail

// found valid marker

// List marker should have no more than 9 digits

// (prevents integer overflow in browsers)

// limit conditions when list can interrupt

// a paragraph (validation mode only)

// Detect list type and position after marker

// If we're starting a new ordered list right after

// a paragraph, it should start with 1.

// If we're starting a new unordered list right after

// a paragraph, first line should not be empty.

// We should terminate list on style change. Remember first one to compare.

// For validation mode we can terminate immediately

// Start list

// Iterate list items

// If we have more than 4 spaces, the indent is 1

// (the rest is just indented code block)

// trimming space in "-    \n  3" case, indent is 1 here

// "  -  test"

//  ^^^^^ - calculating total length of this thing

// Run subparser & write tokens

// workaround for this case

// (list item is empty, list terminates before "foo"):

// ~~~~~~~~

//   -

//     foo

// If any of list item is tight, mark list as tight

// Item become loose if finish with empty line,

// but we should filter last element, because it means list finish

// Try to check if list is terminated or continued.

// fail if terminating block found

// fail if list has another type

// Finalize list

// mark paragraphs tight if needed

// Paragraph

/*, endLine*/

// Simple check to quickly interrupt scan on [link](url) at the start of line.

// Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54

// [label]:   destination   'title'

//         ^^^ skip optional whitespace here

//            ^^^^^^^^^^^ parse this

//                       ^^^ skipping those spaces

// save cursor state, we could require to rollback later

//                          ^^^^^^^ parse this

// skip trailing spaces until the rest of the line

// garbage at the end of the line after title,

// but it could still be a valid reference if we roll back

// Reference can not terminate anything. This check is for safety only.

/*istanbul ignore if*/

// Parser state class

// link to parser instance

// Internal state vartiables

// line begin offsets for fast jumps

// line end offsets for fast jumps

// offsets of the first non-space characters (tabs not expanded)

// indents for each line (tabs expanded)

// An amount of virtual spaces (tabs expanded) between beginning

// of each line (bMarks) and real beginning of that line.

// It exists only as a hack because blockquotes override bMarks

// losing information in the process.

// It's used only when expanding tabs, you can think about it as

// an initial tab length, e.g. bsCount=21 applied to string `\t123`

// means first tab should be expanded to 4-21%4 === 3 spaces.

// block parser variables

// required block content indent

// (for example, if we are in list)

// line index in src

// lines count

// loose/tight mode for lists

// indent of the current dd block (-1 if there isn't any)

// can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'

// used in lists to determine if they interrupt a paragraph

// renderer

// Create caches

// Generate markers.

// Push fake entry to simplify cache bounds checks

// Push new token to "stream".

// Skip spaces from given position.

// Skip spaces from given position in reverse.

// Skip char codes from given position

// Skip char codes reverse from given position - 1

// cut lines range from source.

// No need for bounds check because we have fake entry on tail.

// patched tShift masked characters to look like spaces (blockquotes, list markers)

// partially expanding tabs in code blocks, e.g '\t\tfoobar'

// with indent=2 becomes '  \tfoobar'

// re-export Token class to use in block rules

// GFM table, non-standard

// make \` close code sequence, but not open it;

// the reason is: `\` is correct code block

// If there was an un-closed backtick, go back to just after

// the last backtick, but as if it was a normal character

// should have at least two lines

// first character of the second line should be '|', '-', ':',

// and no other characters are allowed but spaces;

// basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

// allow empty columns before and after table, but not in between columns;

// e.g. allow ` |---| `, disallow ` ---||--- `

// header row will define an amount of columns in the entire table,

// and align row shouldn't be smaller than that (the rest of the rows can)

// Parse inlines

// Replace link-like texts with link nodes.

// Currently restricted by `md.validateLink()` to http/https/ftp

// We scan from the end, to keep position when new tags added.

// Use reversed logic in links start/end match

// Skip content of markdown links

// Skip content of html tag links

// Now split string to nodes

// Linkifier might send raw hostnames like "example.com", where url

// starts with domain name. So we prepend http:// in those cases,

// and remove it afterwards.

// replace current node

// Normalize input string

// Normalize newlines

// Replace NULL characters

// Simple typographyc replacements

// (c) (C) → ©

// (tm) (TM) → ™

// (r) (R) → ®

// +- → ±

// (p) (P) -> §

// ... → … (also ?.... → ?.., !.... → !..)

// ???????? → ???, !!!!! → !!!, `,,` → `,`

// -- → &ndash;, --- → &mdash;

// TODO:

// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾

// - miltiplication 2 x 4 -> 2 × 4

// Workaround for phantomjs - need regex without /g flag,

// or root check will fail every second time

// Convert straight quotation marks to typographic ones

/* ’ */

/*eslint no-labels:0,block-scoped-var:0*/

// Find previous character,

// default to space if it's the beginning of the line

// lastChar defaults to 0x20

// Find next character,

// default to space if it's the end of the line

// nextChar defaults to 0x20

// special case: 1"" - count first quote as an inch

// treat this as the middle of the word

// this could be a closing quote, rewind the stack to get a match

// replace token.content *before* tokens[item.token].content,

// because, if they are pointing at the same token, replaceAt

// could mess up indices when quote length != 1

// middle of word

/*eslint max-depth:0*/

// Core state object

// re-export Token class to use in core rules

// Process autolinks '<protocol:...>'

/*eslint max-len:0*/

// Parse backticks

// For each opening emphasis-like marker find a matching closing one

// Process *this* and _that_

// Char code of the starting marker (number).

// Total length of these series of delimiters.

// An amount of characters before this one that's equivalent to

// current one. In plain English: if this delimiter does not open

// an emphasis, neither do previous `jump` characters.

// Used to skip sequences like "*****" in one step, for 1st asterisk

// value will be 0, for 2nd it's 1 and so on.

// A position of the token this delimiter corresponds to.

// Token level.

// If this delimiter is matched as a valid opener, `end` will be

// equal to its position, otherwise it's `-1`.

// Boolean flags that determine if this delimiter could open or close

// an emphasis.

// Process only opening markers

// If the previous delimiter has the same marker and is adjacent to this one,

// merge those into one strong delimiter.

// `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`

// Process html entity - &#123;, &#xAF;, &quot;, ...

// Process escaped chars and hardbreaks

// skip leading whitespaces from next line

// Process html tags

// Check start

// Quick fail on second char

// to lower case

/* a */

/* z */

// Process ![image](<src> "title")

// parser failed to find ']', so it's not a valid link

// Inline link

// [link](  <href>  "title"  )

//        ^^ skipping these spaces

//          ^^^^^^ parsing link destination

//                ^^ skipping these spaces

//                  ^^^^^^^ parsing link title

//                         ^^ skipping these spaces

// Link reference

// covers label === '' and label === undefined

// (collapsed reference link and shortcut reference link respectively)

// We found the end of the link, and know for a fact it's a valid link;

// so all that's left to do is to call tokenizer.

// Process [link](<to> "stuff")

// might have found a valid shortcut link, disable reference parsing

// parsing a valid shortcut link failed, fallback to reference

// Proceess '\n'

// skip heading spaces for next line

// '  \n' -> hardbreak

// Lookup in pending chars is bad practice! Don't copy to other rules!

// Pending string is stored in concat mode, indexed lookups will cause

// convertion to flat mode.

// Inline parser state

// Stores { start: end } pairs. Useful for backtrack

// optimization of pairs parse (emphasis, strikes).

// Flush pending text

// If pending text exists - flush it as text token

// Scan a sequence of emphasis-like markers, and determine whether

// it can start an emphasis sequence or end an emphasis sequence.

//  - start - position to scan from (it should point at a valid marker);

//  - canSplitWord - determine if these markers can be found inside a word

// treat beginning of the line as a whitespace

// treat end of the line as a whitespace

// ~~strike through~~

// Skip text characters for text token, place those to pending buffer

// and increment current pos

// Rule to skip pure text

// '{}$%@~+=:' reserved for extentions

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars

// Merge adjacent text nodes into one, and re-calculate all token levels

// re-calculate levels

// collapse two adjacent text nodes

// Token class

/**
 * class Token
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/

/**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/

/**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/

/**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/

/**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/

/**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/

/**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/

/**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/

/**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/

/**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/

/**
   * Token#info -> String
   *
   * fence infostring
   **/

/**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/

/**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/

/**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/

/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/

/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/

/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/

/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/

/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/

/* eslint-disable no-bitwise */

// Decode percent-encoded string.

// 110xxxxx 10xxxxxx

// 1110xxxx 10xxxxxx 10xxxxxx

// 111110xx 10xxxxxx 10xxxxxx 10xxxxxx

// Create a lookup array where anything but characters in `chars` string

// and alphanumeric chars is percent-encoded.

// Encode unsafe characters with percent-encoding, skipping already

// encoded sequences.

//  - string       - string to encode

//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)

//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)

// encode(string, keepEscaped)

// always allow unencoded alphanumeric characters

// ipv6 address

// Copyright Joyent, Inc. and other Node contributors.

// Permission is hereby granted, free of charge, to any person obtaining a

// copy of this software and associated documentation files (the

// "Software"), to deal in the Software without restriction, including

// without limitation the rights to use, copy, modify, merge, publish,

// distribute, sublicense, and/or sell copies of the Software, and to permit

// persons to whom the Software is furnished to do so, subject to the

// following conditions:

// The above copyright notice and this permission notice shall be included

// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Changes from joyent/node:

// 1. No leading slash in paths,

//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`

// 2. Backslashes are not replaced with slashes,

//    so `http:\\example.org\` is treated like a relative path

// 3. Trailing colon is treated like a part of the path,

//    i.e. in `http://example.org:foo` pathname is `:foo`

// 4. Nothing is URL-encoded in the resulting object,

//    (in joyent/node some chars in auth and paths are encoded)

// 5. `url.parse()` does not have `parseQueryString` argument

// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,

//    which can be constructed using other parts of the url.

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be

// compiled once on the first module load.

// Special case for a simple path URL

// RFC 2396: characters not allowed for various reasons.

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Characters that are never ever allowed in a hostname.

// Note that any invalid chars are also handled, but these

// are the ones that are *expected* to be seen, so we fast-path

// them.

// protocols that can allow "unsafe" and "unwise" chars.

/* eslint-disable no-script-url */

// protocols that never have a hostname.

// protocols that always contain a // bit.

/* eslint-enable no-script-url */

// trim before proceeding.

// This is to support parse stuff like "  http://foo.com  \n"

// Try fast path regexp

// figure out if it's got a host

// user@server is *always* interpreted as a hostname, and url

// resolution will treat //foo/bar as host=foo,path=bar because that's

// how the browser resolves relative URLs.

// there's a hostname.

// the first instance of /, ?, ;, or # ends the host.

// If there is an @ in the hostname, then non-host chars *are* allowed

// to the left of the last @ sign, unless some host-ending character

// comes *before* the @-sign.

// URLs are obnoxious.

// ex:

// http://a@b@c/ => user:a@b host:c

// http://a@b?@c => user:a host:c path:/?@c

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// Review our test case against browsers more comprehensively.

// find the first instance of any hostEndingChars

// at this point, either we have an explicit point where the

// auth portion cannot go past, or the last @ char is the decider.

// Now we have a portion which is definitely the auth.

// Pull that off.

// atSign can be anywhere.

// the host is the remaining to the left of the first non-host char

// if we still have not hit it, then the entire thing is a host.

// pull out port.

// we've indicated that there is a hostname,

// so even if it's empty, it has to be present.

// if hostname begins with [ and ends with ]

// assume that it's an IPv6 address.

// validate a little.

// we replace non-ASCII char with a temporary placeholder

// we need this to make sure size of hostname is not

// broken by replacing non-ASCII by nothing

// we test again with ASCII char only

// strip [ and ] from the hostname

// the host field still retains them, though

// chop off from the tail first.

// got a fragment string.

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* WEBPACK VAR INJECTION */

/*! https://mths.be/punycode v1.4.1 by @mathias */

/** Detect free variables */

/**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */

/** Highest positive signed 32-bit float value */

// aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */

// 0x80

// '\x2D'

/** Regular expressions */

// unprintable ASCII chars + non-ASCII chars

// RFC 3490 separators

/** Error messages */

/** Convenience shortcuts */

/*--------------------------------------------------------------------------*/

/**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

/**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */

/**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */

// In email addresses, only the domain name should be punycoded. Leave

// the local part (i.e. everything up to `@`) intact.

// Avoid `split(regex)` for IE8 compatibility. See #17.

/**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

/**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */

/**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */

/**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */

//  0..25 map to ASCII a..z or A..Z

// 26..35 map to ASCII 0..9

/**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */

/* no initialization */

/**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */

// Don't use UCS-2

/** Cached calculation results */

// Handle the basic code points: let `basic` be the number of input code

// points before the last delimiter, or `0` if there is none, then copy

// the first basic code points to the output.

// if it's not a basic code point

// Main decoding loop: start just after the last delimiter if any basic code

// points were copied; start at the beginning otherwise.

/* no final expression */

// `index` is the index of the next character to be consumed.

// Decode a generalized variable-length integer into `delta`,

// which gets added to `i`. The overflow checking is easier

// if we increase `i` as we go, then subtract off its starting

// value at the end to obtain `delta`.

/* no condition */

// `i` was supposed to wrap around from `out` to `0`,

// incrementing `n` each time, so we'll fix that now:

// Insert `n` at position `i` of the output

/**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */

/** `inputLength` will hold the number of code points in `input`. */

// Convert the input in UCS-2 to Unicode

// Handle the basic code points

// Cache the length

// Initialize the state

// Main encoding loop:

// `handledCPCount` is the number of code points that have been handled;

// `basicLength` is the number of basic code points.

// Finish the basic string - if it is not empty - with a delimiter

// All non-basic code points < n have been handled already. Find the next

// larger one:

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// but guard against overflow

// Represent delta as a generalized variable-length integer

/**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */

/** Define the public API */

/**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */

/**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */

/**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */

// Spec says greater than zero

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For non-IE10 modern browsers

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

// late bind

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

// compat with < 2.0.0-alpha.7

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

/**
 * Check if module is recorded
 *
 * @param {String} id
 */

// reset static trees

// pre 2.5, all static trees are cached together on the instance

// 2.5.0

// 2.5.3

// post 2.5.4: v-once trees are cached on instance._staticTrees.

// Pure static trees are cached on the staticRenderFns array

// (both already reset above)

// 2.6: temporarily mark rendered scoped slots as unstable so that

// child components can be forced to update

// 2.6 optimizes template-compiled scoped slots and skips updates if child

// only uses scoped slots. We need to patch the scoped slots resolving helper

// to temporarily mark all scoped slots as unstable in order to force child

// updates.

// https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js

// 2.6.4 ~ 2.6.6

// 2.5 / >= 2.6.7

// handle functional component re-render

// functional or no instance created yet

// rerender with full options

// template-only rerender.

// need to inject the style injection code for CSS modules

// to work properly.

// preserve pre 2.2 behavior for global mixin handling

// temporary global mixin strategy used in < 2.0.0-alpha.6

/* harmony export (binding) */

/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).

// This module is a runtime utility for cleaner component module output and will

// be included in the final webpack user bundle.

/* server only */

/* vue-cli only */

// Vue.extend constructor export interop

// render functions

// functional template

// scopedId

// server build

// 2.3 injection

// functional

// 2.2 with runInNewContext: true

// cached call

// stateful

// inject component styles

// register component module identifier for async chunk inferrence

// used by ssr in case component is cached and beforeCreate

// never gets called

// for template-only hot-reload because in that case the render fn doesn't

// go through the normalizer

// register for functioal component in vue file

// inject component registration as beforeCreate hook

/* unused harmony export Url */

/* unused harmony export Http */

/* unused harmony export Resource */

/*!
 * vue-resource v1.5.1
 * https://github.com/pagekit/vue-resource
 * Released under the MIT License.
 */

/**
 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
 */

/**
 * Promise adapter.
 */

/**
 * Utility functions.
 */

/**
 * Root Prefix Transform.
 */

/**
 * URL Template v2.0.6 (https://github.com/bramstein/url-template)
 */

/**
 * URL Template (RFC 6570) Transform.
 */

/**
 * Service for URL templating.
 */

/**
 * Url options.
 */

/**
 * XDomain client (Internet Explorer).
 */

/**
 * CORS Interceptor.
 */

/**
 * Url transforms.
 */

/**
 * Query Parameter Transform.
 */

/**
 * Encodes a Url parameter string.
 *
 * @param {Object} obj
 */

/**
 * Parse a URL and return its components.
 *
 * @param {String} url
 */

/**
 * JSONP client (Browser).
 */

/**
 * JSONP Interceptor.
 */

/**
 * XMLHttp client (Browser).
 */

// IE9 status bug

// deprecated use downloadProgress

// deprecated use uploadProgress

/**
 * Http client (Node).
 */

/**
 * Base client.
 */

/**
 * HTTP Headers.
 */

/**
 * HTTP Response.
 */

/**
 * HTTP Request.
 */

/**
 * Service for sending network requests.
 */

/**
 * Service for interacting with RESTful services.
 */

/**
 * Install plugin.
 */

/**
 * Before Interceptor.
 */

/**
 * HTTP method override Interceptor.
 */

/**
 * Header Interceptor.
 */

/**
 * JSON Interceptor.
 */

/**
 * Form data Interceptor.
 */

/*!
  * vue-router v3.0.6
  * (c) 2019 Evan You
  * @license MIT
  */

/*  */

// used by devtools to display a router-view badge

// directly use parent context's createElement() function

// so that components rendered by router-view can resolve named slots

// render previous view if the tree is inactive and kept-alive

// render empty node if no matched route

// attach instance registration hook

// this will be called in the instance's injected lifecycle hooks

// val could be undefined for unregistration

// also register instance in prepatch hook

// in case the same component instance is reused across different routes

// register instance in init hook

// in case kept-alive component be actived when routes changed

// resolve props

// clone to prevent mutation

// pass non-declared props as attrs

// the starting route that represents the initial state

// handle null value #1566

// check nested equality

// work around weird flow bug

// find the first <a> child and apply listener and href

// in case the <a> is a static node

// doesn't have <a> child, apply listener to self

// don't redirect with control keys

// don't redirect on right click

// don't redirect if `target="_blank"`

// this may be a Weex event which doesn't have this method

// don't redirect when preventDefault called

// remove trailing segment if:

// - not appending

// - appending to trailing slash (last segment is empty)

// resolve relative path

// ensure leading slash

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Expose `pathToRegexp`.
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

// $flow-disable-line

// Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}

// delete the 0 if it was added

// the path list is used to control path matching priority

// ensure wildcard routes are always at the end

// named target

// relative params

// no match

// resolved named direct

// Fix #1994: using * with props: true generates a param named 0

// Fix for #1585 for Firefox

// Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678

// wait until re-render finishes before scrolling

// use User Timing api (if present) for more accurate key precision

// try...catch the pushState call to get around Safari

// DOM Exception 18 where it limits to 100 pushState calls

// if it's a function and doesn't have cid attached,

// assume it's an async component resolve function.

// we are not using Vue's default async resolving mechanism because

// we want to halt the navigation until the incoming component has been

// resolved.

// in Webpack 2, require.ensure now also returns a Promise

// so the resolve/reject functions may get called an extra time

// if the user uses an arrow function shorthand that happens to

// return that Promise.

// save resolved on async factory in case it's used elsewhere

// new syntax in Vue 2.3

// respect <base> tag

// strip full URL origin

// make sure there's the starting slash

// remove trailing slash

// start with a route object that stands for "nowhere"

// extend now so that global mixins are applied.

// fire ready cbs once

// in the case the route map has been dynamically appended to

// in-component leave guards

// global before hooks

// in-component update hooks

// in-config enter guards

// async components

// next(false) -> abort navigation, ensure current URL

// next('/') or next({ path: '/' }) -> redirect

// confirm transition and pass on the value

// #750

// if a router-view is wrapped with an out-in transition,

// the instance may not have been registered at this time.

// we will need to poll for registration until current route

// is no longer valid.

// somehow flow cannot infer this is a function

/*@__PURE__*/

// Avoiding first `popstate` event dispatched in some browsers but first

// history route not updated since async guard at the same time.

// check history fallback deeplinking

// this is delayed until the app mounts

// to avoid the hashchange listener being fired too early

// We can't use window.location.hash here because it's not

// consistent across browsers - Firefox will pre-decode it!

// empty path

// decode the hash but not the search or hash

// as search(query) is already decoded

// https://github.com/vuejs/vue-router/issues/2708

// noop

/* Vue component instance */

// main app previously initialized

// return as we don't need to set up new history listener

// set up app destroyed handler

// https://github.com/vuejs/vue-router/issues/2639

// clean out app from this.apps array once destroyed

// ensure we still have a main app or null if no apps

// we do not release the router so it can be reused

// for backwards compat

// use the same hook merging strategy for route hooks

/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */

// These helpers produce better VM code in JS engines due to their

// explicitness and function inlining.

/**
   * Check if value is primitive.
   */

/**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */

/**
   * Get the raw type string of a value, e.g., [object Object].
   */

/**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */

/**
   * Check if val is a valid array index.
   */

/**
   * Convert a value to a string that is actually rendered.
   */

/**
   * Convert an input value to a number for persistence.
   * If the conversion fails, return original string.
   */

/**
   * Make a map and return a function for checking if a key
   * is in that map.
   */

/**
   * Check if a tag is a built-in tag.
   */

/**
   * Check if an attribute is a reserved attribute.
   */

/**
   * Remove an item from an array.
   */

/**
   * Check whether an object has the property.
   */

/**
   * Create a cached version of a pure function.
   */

/**
   * Camelize a hyphen-delimited string.
   */

/**
   * Simple bind polyfill for environments that do not support it,
   * e.g., PhantomJS 1.x. Technically, we don't need this anymore
   * since native bind is now performant enough in most browsers.
   * But removing it would mean breaking code that was able to run in
   * PhantomJS 1.x, so this must be kept for backward compatibility.
   */

/* istanbul ignore next */

/**
   * Convert an Array-like object to a real Array.
   */

/**
   * Mix properties into target object.
   */

/**
   * Merge an Array of Objects into a single Object.
   */

/* eslint-disable no-unused-vars */

/**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
   */

/**
   * Always return false.
   */

/* eslint-enable no-unused-vars */

/**
   * Return the same value.
   */

/**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */

/**
   * Return the first index at which a loosely equal value can be
   * found in the array (if value is a plain object, the array must
   * contain an object of the same shape), or -1 if it is not present.
   */

/**
   * Ensure a function is called only once.
   */

/**
     * Option merge strategies (used in core/util/options)
     */

/**
     * Whether to suppress warnings.
     */

/**
     * Show production mode tip message on boot?
     */

/**
     * Whether to enable devtools
     */

/**
     * Whether to record perf
     */

/**
     * Error handler for watcher errors
     */

/**
     * Warn handler for watcher warns
     */

/**
     * Ignore certain custom elements
     */

/**
     * Custom user key aliases for v-on
     */

/**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */

/**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */

/**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */

/**
     * Get the namespace of an element
     */

/**
     * Parse the real tag name for the specific platform.
     */

/**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */

/**
     * Perform updates asynchronously. Intended to be used by Vue Test Utils
     * This will significantly reduce performance if set to false.
     */

/**
     * Exposed for legacy reasons
     */

/**
   * Check if a string starts with $ or _
   */

/**
   * Define a property.
   */

/**
   * Parse simple path.
   */

// can we use __proto__?

// Browser environment sniffing

// https://github.com/facebook/flow/issues/285

// this needs to be lazy-evaled because vue may be required before

// vue-server-renderer can set VUE_ENV

/* istanbul ignore if */

// detect devtools

// use native Set when available.

/**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */

// stabilize the subscriber list first

// subs aren't sorted in scheduler if not running async

// we need to sort them now to make sure they fire in correct

// order

// The current target watcher being evaluated.

// This is globally unique because only one watcher

// can be evaluated at a time.

// DEPRECATED: alias for componentInstance for backwards compat.

// optimized shallow clone

// used for static nodes and slot nodes because they may be reused across

// multiple renders, cloning them avoids errors when DOM manipulations rely

// on their elm reference.

// #7975

// clone children array to avoid mutating original in case of cloning

// a child.

/*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

/**
   * Intercept mutating methods and emit events
   */

// cache original method

// notify change

/**
   * In some cases we may want to disable observation inside a component's
   * update computation.
   */

/**
   * Observer class that is attached to each observed
   * object. Once attached, the observer converts the target
   * object's property keys into getter/setters that
   * collect dependencies and dispatch updates.
   */

// helpers

/**
   * Augment a target Object or Array by intercepting
   * the prototype chain using __proto__
   */

/* eslint-enable no-proto */

/**
   * Augment a target Object or Array by defining
   * hidden properties.
   */

/**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */

/**
   * Walk through all properties and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */

/**
   * Define a reactive property on an Object.
   */

// cater for pre-defined getter/setters

/**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */

/**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */

/* eslint-disable no-self-compare */

/* eslint-enable no-self-compare */

// #7981: for accessor properties without setter

/**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */

/**
   * Delete a property and trigger change if necessary.
   */

/**
   * Observe a list of Array items.
   */

/**
   * Options with restrictions
   */

/**
   * Helper that recursively merges two data objects together.
   */

// in case the object is already observed...

/**
   * Data
   */

// instance merge

// in a Vue.extend merge, both should be functions

/**
   * Hooks and props are merged as arrays.
   */

/**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */

/**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */

// work around Firefox's Object.prototype.watch...

/**
   * Other object hashes.
   */

/**
   * Default strategy.
   */

/**
   * Validate component names
   */

/**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */

/**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */

// Apply extends and mixins on the child options,

// but only if it is a raw options object that isn't

// the result of another mergeOptions call.

// Only merged options has the _base property.

/**
   * Normalize all injections into Object-based format
   */

/**
   * Normalize raw function directives into object format.
   */

/**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */

// check local registration variations first

// fallback to prototype chain

// only cast empty string / same name to boolean if

// boolean has higher priority

// check default value

/**
   * Get the default value of a prop.
   */

// no default, return undefined

// warn against non-factory defaults for Object & Array

// the raw prop value was also undefined from previous render,

// return previous default value to avoid unnecessary watcher trigger

// call factory function for non-Function types

// a value is Function if its prototype is function even across different execution context

/**
   * Assert whether a prop is valid.
   */

// since the default value is a fresh copy,

// make sure to observe it.

// check if we need to specify expected value

// check if we need to specify received value

// for primitive wrapper objects

/**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */

// Deactivate deps tracking while processing error handler to avoid possible infinite rendering.

// See: https://github.com/vuejs/vuex/issues/1505

// issue #9511

// avoid catch triggering multiple times when nested calls

// if the user intentionally throws the original error in the handler,

// do not log it twice

/* istanbul ignore else */

// Here we have async deferring wrappers using microtasks.

// In 2.5 we used (macro) tasks (in combination with microtasks).

// However, it has subtle problems when state is changed right before repaint

// (e.g. #6813, out-in transitions).

// Also, using (macro) tasks in event handler would cause some weird behaviors

// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).

// So we now use microtasks everywhere, again.

// A major drawback of this tradeoff is that there are some scenarios

// where microtasks have too high a priority and fire in between supposedly

// sequential events (e.g. #4521, #6690, which have workarounds)

// or even between bubbling of the same event (#6566).

// The nextTick behavior leverages the microtask queue, which can be accessed

// via either native Promise.then or MutationObserver.

// MutationObserver has wider support, however it is seriously bugged in

// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It

// completely stops working after triggering a few times... so, if native

// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

// In problematic UIWebViews, Promise.then doesn't completely break, but

// it can get stuck in a weird state where callbacks are pushed into the

// microtask queue but the queue isn't being flushed, until the browser

// needs to do some other work, e.g. handle a timer. Therefore we can

// "force" the microtask queue to be flushed by adding an empty timer.

// PhantomJS and iOS 7.x

// Fallback to setImmediate.

// Techinically it leverages the (macro) task queue,

// but it is still a better choice than setTimeout.

// Use MutationObserver where native Promise is not available,

// e.g. PhantomJS, iOS7, Android 4.4

// (#6466 MutationObserver is unreliable in IE11)

// determine which proxy handler to use

/**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */

// Prefixed last, checked first

// return handler return value for single handlers

// important: remove merged hook to ensure it's called only once

// and prevent memory leak

// no existing hook

// already a merged invoker

// existing plain hook

// The template compiler attempts to minimize the need for normalization by

// statically analyzing the template at compile time.

// For plain HTML markup, normalization can be completely skipped because the

// generated render function is guaranteed to return Array<VNode>. There are

// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component

// may return an Array instead of a single root. In this case, just a simple

// normalization is needed - if any child is an Array, we flatten the whole

// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep

// because functional components already normalize their own children.

// 2. When the children contains constructs that always generated nested Arrays,

// e.g. <template>, <slot>, v-for, or when the children is provided by user

// with hand-written render functions / JSX. In such cases a full normalization

// is needed to cater to all possible types of children values.

//  nested

// merge adjacent text nodes

// this is necessary for SSR hydration because text nodes are

// essentially merged when rendered to HTML strings

// convert primitive to vnode

// default key for nested array children (likely generated by v-for)

// inject is :any because flow is not smart enough to figure out cached

// #6574 in case the inject object is observed...

/**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */

// named slots should only be respected if the vnode was rendered in the

// same context.

// remove slot attribute if the node is resolved as a Vue slot node

// ignore slots that contains only whitespace

// fast path 1: child component re-render only, parent did not change

// expose normal slots on scopedSlots

// fast path 2: stable scoped slots w/ no normal slots to proxy,

// only need to normalize once

// avoriaz seems to mock a non-extensible $scopedSlots object

// and when that is passed down this would cause an error

// this is a slot using the new v-slot syntax without scope. although it is

// compiled as a scoped slot, render fn users would expect it to be present

// on this.$slots because the usage is semantically a normal slot.

/**
   * Runtime helper for rendering v-for lists.
   */

/**
   * Runtime helper for rendering <slot>
   */

// scoped slot

/**
   * Runtime helper for resolving filters
   */

/**
   * Runtime helper for checking keyCodes from config.
   * exposed as Vue.prototype._k
   * passing in eventKeyName as last argument separately for backwards compat
   */

/**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */

/**
   * Runtime helper for rendering static trees.
   */

// if has already-rendered static tree and not inside v-for,

// we can reuse the same tree.

// otherwise, render a fresh tree.

/**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */

// see flow/vnode

// the following are added in 2.6

// marker for reverse proxying v-slot without scope on this.$slots

// null is a speical value for explicitly removing a binding

// helper to dynamically append modifier runtime markers to event names.

// ensure only append when value is already string, otherwise it will be cast

// to string and cause the type check to miss.

// the context vm passed in is a functional context as well.

// in this case we want to make sure we are able to get a hold to the

// real context instance.

// support for compiled functional template

// exposing $options for renderStatic()

// pre-resolve slots for renderSlot()

// #7817 clone node before setting fnContext, otherwise if the node is reused

// (e.g. it was from a cached normal slot) the fnContext causes named slots

// that should not be matched to match.

// inline hooks to be invoked on component VNodes during patch

// kept-alive components, treat as a patch

// work around flow

// we know it's MountedComponentVNode but flow doesn't

// check inline-template render functions

// determine whether component has slot children

// we need to do this before overwriting $options._renderChildren.

// check if there are dynamic scopedSlots (hand-written or compiled but with

// dynamic slot names). Static scoped slots compiled from template has the

// "$stable" marker.

// has new static slots

// has old static slots

// update vm's placeholder node without re-render

// update child tree's parent

// update props

// update $attrs and $listeners hash

// these are also reactive so they may trigger child update if the child

// used them during render

// wtf flow?

// keep a copy of raw propsData

// update listeners

// resolve slots + force update if has children

// updated props

// updated listeners

// new parent vnode

// vue-router#1212

// During updates, a kept-alive component's child components may

// change, so directly walking the tree here may call activated hooks

// on incorrect children. Instead we push them into a queue which will

// be processed after the whole patch process ended.

/**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */

// setting _inactive to false here so that a render function can

// rely on checking whether it's in an inactive tree (e.g. router-view)

/* direct */

// plain options object: turn it into a constructor

// if at this stage it's not a constructor or an async component factory,

// reject.

// async component

// already pending

// cache resolved

// invoke callbacks only if this is not a synchronous resolve

// (async resolves are shimmed as synchronous during SSR)

// return in case resolved synchronously

// () => Promise

// return a placeholder node for async component, which is rendered

// as a comment node but preserves all the raw information for the node.

// the information will be used for async server-rendering and hydration.

// resolve constructor options in case global mixins are applied after

// component constructor creation

// transform component v-model data into props & events

// transform component v-model info (value and callback) into

// prop and event handler respectively.

// extract props

// we are only extracting raw values here.

// validation and default values are handled in the child

// component itself.

// functional component

// extract listeners, since these needs to be treated as

// child component listeners instead of DOM listeners

// replace with listeners with .native modifier

// so it gets processed during parent component patch.

// abstract components do not keep anything

// other than props & listeners & slot

// install component management hooks onto the placeholder node

// return a placeholder vnode

// flow complains about extra args which is why we use any

// wrapper function for providing a more flexible interface

// without getting yelled at by flow

// object syntax in v-bind

// in case of component :is set to falsy value

// warn against non-primitive key

// support single function children as default scoped slot

// platform built-in elements

// direct component options / constructor

// use default namespace inside foreignObject

// ref #5318

// necessary to ensure parent re-render when deep bindings like :style and

// :class are used on slot nodes

// the root of the child tree

// v-once cached trees

// bind the createElement fn to this instance

// so that we get proper render context inside it.

// args order: tag, data, children, normalizationType, alwaysNormalize

// internal version is used by render functions compiled from templates

// normalization is always applied for the public version, used in

// user-written render functions.

// $attrs & $listeners are exposed for easier HOC creation.

// they need to be reactive so that HOCs using them are always updated

// init parent attached events

// locate first non-abstract parent

// #7573 disable dep collection when invoking lifecycle hooks

// Async edge case #6566 requires saving the timestamp when event listeners are

// attached. However, calling performance.now() has a perf overhead especially

// if the page has thousands of event listeners. Instead, we take a timestamp

// every time the scheduler flushes and use that for all event listeners

// attached during that flush.

// Async edge case fix requires storing an event listener's attach timestamp.

// Determine what event timestamp the browser is using. Annoyingly, the

// timestamp can either be hi-res (relative to page load) or low-res

// (relative to UNIX epoch), so in order to compare time we have to use the

// same timestamp type when saving the flush timestamp.

// All IE versions use low-res event timestamps, and have problematic clock

// implementations (#9632)

// if the event timestamp, although evaluated AFTER the Date.now(), is

// smaller than it, it means the event is using a hi-res timestamp,

// and we need to use the hi-res version for event listener timestamps as

// well.

/**
   * Flush both queues and run the watchers.
   */

// Sort queue before flush.

// This ensures that:

// 1. Components are updated from parent to child. (because parent is always

//    created before the child)

// 2. A component's user watchers are run before its render watcher (because

//    user watchers are created before the render watcher)

// 3. If a component is destroyed during a parent component's watcher run,

//    its watchers can be skipped.

// do not cache length because more watchers might be pushed

// as we run existing watchers

// in dev build, check and stop circular updates.

// keep copies of post queues before resetting state

// call component updated and activated hooks

/* true */

/**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */

// devtool hook

// options

// uid for batching

// for lazy watchers

// parse expression for getter

/**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */

/**
   * Evaluate the getter, and re-collect dependencies.
   */

// "touch" every property so they are all tracked as

// dependencies for deep watching

/**
   * Add a dependency to this directive.
   */

/**
   * Clean up for dependency collection.
   */

/**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */

// if already flushing, splice the watcher based on its id

// if already past its id, it will be run next immediately.

// queue the flush

/**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */

// Deep watchers and watchers on Object/Arrays should fire even

// when the value is the same, because the value may

// have mutated.

// set new value

/**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */

/**
   * Depend on all deps collected by this watcher.
   */

/**
   * Remove self from all dependencies' subscriber list.
   */

// remove self from vm's watcher list

// this is a somewhat expensive operation so we skip it

// if the vm is being destroyed.

// root instance props should be converted

// static props are already proxied on the component's prototype

// during Vue.extend(). We only need to proxy props defined at

// instantiation here.

// #7573 disable dep collection when invoking data getters

// proxy data on instance

// observe data

/* asRootData */

// computed properties are just getters during SSR

// create internal watcher for the computed property.

// component-defined computed properties are already defined on the

// component prototype. We only need to define computed properties defined

// at instantiation here.

// doing this because it's faster than dynamic enumeration.

// super option changed,

// need to resolve new options.

// check if there are any late-modified/attached options (#4976)

// update base extend options

/**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */

/**
     * Class inheritance
     */

// For props and computed properties, we define the proxy getters on

// the Vue instances at extension time, on the extended prototype. This

// avoids Object.defineProperty calls for each instance created.

// allow further extension/mixin/plugin usage

// create asset registers, so extended classes

// can have their private assets too.

// enable recursive self-lookup

// keep a reference to the super options at extension time.

// later at instantiation we can check if Super's options have

// been updated.

// cache constructor

// a uid

// a flag to avoid this being observed

// merge options

// optimize internal component instantiation

// since dynamic options merging is pretty slow, and none of the

// internal component options needs special treatment.

// expose real self

// resolve injections before data/props

// resolve provide after data/props

// flow somehow has problems with directly declared definition object

// when using Object.defineProperty, so we have to procedurally build up

// the object here.

// optimize hook:event cost by using a boolean flag marked at registration

// instead of a hash lookup

// all

// array of events

// specific event

// specific handler

// Vue.prototype.__patch__ is injected in entry points

// based on the rendering backend used.

// updates

/* removeOnly */

// update __vue__ reference

// if parent is an HOC, update its $el as well

// remove self from parent

// teardown watchers

// remove reference from data ob

// frozen object may not have observer.

// call the last hook...

// invoke destroy hooks on current rendered tree

// fire destroyed hook

// turn off all instance listeners.

// remove __vue__ reference

// release circular reference (#6759)

// install runtime convenience helpers

// set parent vnode. this allows render functions to have access

// to the data on the placeholder node.

// There's no need to maintain a stack becaues all render fns are called

// separately from one another. Nested component's render fns are called

// when parent component is patched.

// return error render result,

// or previous vnode to prevent render error causing blank component

// if the returned array contains only a single node, allow it

// return empty vnode in case the render function errored out

// set parent

// check pattern

// not included

// excluded

// make current key freshest

// prune oldest entry

// config

// exposed util methods.

// NOTE: these are not considered part of the public API - avoid relying on

// them unless you are aware of the risk.

// 2.6 explicit observable API

// this is used to identify the "base" constructor to extend all plain-object

// components with in Weex's multi-instance scenarios.

// additional parameters

/**
     * Create asset registration methods.
     */

// expose FunctionalRenderContext for ssr runtime helper installation

// these are reserved for web because they are directly compiled away

// during template compilation

// attributes that should be using props for binding

// basic support for MathML

// note it doesn't support other MathML elements being component roots

/**
   * Query an element selector if it's not an element already.
   */

/*#__PURE__*/

// false or null will remove the attribute but undefined will not

/**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

// existing directive, update

// new directive, bind

// no longer present, unbind

// clone observed objects, as the user probably wants to mutate it

// #4391: in IE9, setting type can reset value for input[type=radio]

// #6666: IE/Edge forces progress value down to 1 before setting a max

// set attribute for blank value

// e.g. <option disabled>Select one</option>

// technically allowfullscreen is a boolean attribute for <iframe>,

// but Flash expects a value of "true" when used on <embed> tag

// #7138: IE10 & 11 fires input event when setting placeholder on

// <textarea>... block the first input event and remove the blocker

// immediately.

// handle transition classes

// set the class

// pipe

// "

// '

// `

// (

// )

// [

// ]

// find first non-whitespace prev char

// /

// first filter, end of expression

// _f: resolveFilter

// add a raw attr (use this in preTransforms)

// mark the event as captured

// warn prevent and passive modifier

// normalize click.right and click.middle since they don't actually fire

// this is technically browser-specific, but at least for now browsers are

// the only target envs that have right/middle clicks.

// check capture modifier

// note: this only removes the attr from the Array (attrsList) so that it

// doesn't get processed by processAttrs.

// By default it does NOT remove it from the map (attrsMap) because the map is

// needed during codegen.

/**
   * Cross-platform code generation for component v-model
   */

/**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */

// Fix https://github.com/vuejs/vue/pull/7730

// allow v-model="obj.val " (trailing whitespace)

/**
   * Parse a v-model expression into a base path and a final key segment.
   * Handles both dot-path and possible square brackets.
   *
   * Possible cases:
   *
   * - test
   * - test[key]
   * - test[test1[key]]
   * - test["a"][key]
   * - xxx.test[a[a].test1[key]]
   * - test.xxx.a["asa"][test1[key]]
   *
   */

// in some cases, the event used has to be determined at runtime

// so we used some reserved tokens during compile.

// warn if v-bind:value conflicts with v-model

// except for inputs with v-bind:type

// normalize v-model event tokens that can only be determined at runtime.

// it's important to place the event as the first in the array because

// the whole point is ensuring the v-model callback gets called before

// user-attached handlers.

// save current target element in closure

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp

// implementation and does not fire microtasks in between event propagation, so

// safe to exclude.

// async edge case #6566: inner click event triggers patch, event handler

// attached to outer element during patch, and triggered again. This

// happens because browsers fire microtask ticks between event propagation.

// the solution is simple: we save the timestamp when a handler is attached,

// and the handler would only fire if the event passed to it was fired

// AFTER it was attached.

// no bubbling, should always fire.

// this is just a safety net in case event.timeStamp is unreliable in

// certain weird environments...

// event is fired after handler attachment

// bail for environments that have buggy event.timeStamp implementations

// #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState

// #9681 QtWebEngine event.timeStamp is negative value

// #9448 bail if event is fired in another document in a multi-page

// electron/nw.js app, since event.timeStamp will be using a different

// starting reference

// IE input[type=range] only supports `change` event

// This was originally intended to fix #4521 but no longer necessary

// after 2.5. Keeping it for backwards compat with generated code from < 2.4

// ignore children if the node has textContent or innerHTML,

// as these will throw away existing DOM nodes and cause removal errors

// on subsequent patches (#3360)

// #6601 work around Chrome version <= 55 bug where single textNode

// replaced by innerHTML/textContent retains its parentNode property

// avoid resetting cursor position when value is the same

// store value as _value as well since

// non-string values will be stringified

// return true when textbox (.number and .trim) loses focus and its value is

// not equal to the updated value

// #6157

// work around IE bug when accessing document.activeElement in an iframe

// injected by v-model runtime

// IE doesn't support innerHTML for SVG elements

// skip the update if old and new VDOM state is the same.

// `value` is handled separately because the DOM value may be temporarily

// out of sync with VDOM state due to focus, composition and modifiers.

// This  #4521 by skipping the unnecesarry `checked` update.

// some property updates can throw

// e.g. `value` on <progress> w/ non-finite value

// check platforms/web/util/attrs.js acceptValue

// merge static and dynamic style data on the same vnode

// static style is pre-processed into an object during compilation

// and is always a fresh object, so it's safe to merge into it

// normalize possible array / string values into Object

/**
   * parent component style should be after child's
   * so that parent component's style could override it
   */

// Support values array created by autoprefixer, e.g.

// {display: ["-webkit-box", "-ms-flexbox", "flex"]}

// Set them one by one, and the browser will only set those it can recognize

// store normalized style under a different key for next diff

// make sure to clone it if it's reactive, since the user likely wants

// to mutate it.

// ie9 setting to null has no effect, must use empty string

/**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */

/**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */

// binding to window is necessary to make hot reload work in IE in strict mode

// JSDOM may return undefined for transition properties

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers

// in a locale-dependent way, using a comma instead of a dot.

// If comma is not replaced with a dot, the input will be rounded down (i.e. acting

// as a floor function) causing unexpected behaviors

// call leave callback now

// remove pending leave element on enter by injecting an insert hook

// start enter transition

// call enter callback now

// the delayed leave may have already been cancelled

// record leaving element

// only used in dev mode

/**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */

// element may have already been removed due to v-html / v-text

// for transition enter check

// This vnode was used in a previous render!

// now it's used as a new node, overwriting its elm would cause

// potential patch errors down the road when it's used as an insertion

// reference node. Instead, we clone the node on-demand before creating

// associated DOM element for it.

// after calling the init hook, if the vnode is a child component

// it should've created a child instance and mounted it. the child

// component also has set the placeholder vnode's elm.

// in that case we can just return the element and be done.

/* hydrating */

// hack for #4339: a reactivated component with inner transition

// does not trigger because the inner node's created hooks are not called

// again. It's not ideal to involve module-specific logic in here but

// there doesn't seem to be a better way to do it.

// unlike a newly created component,

// a reactivated keep-alive component doesn't insert itself

// empty component root.

// skip all element-related modules except for ref (#3455)

// make sure to invoke the insert hook

// Reuse variable

// set scope id attribute for scoped CSS.

// this is implemented as a special case to avoid the overhead

// of going through the normal attribute patching process.

// for slot content they should also get the scopeId from the host instance.

// Text node

// we have a recursively passed down rm callback

// increase the listeners count

// directly removing

// recursively invoke hooks on child component root node

// Vnode moved right

// Vnode moved left

// New element

// same key but different element. treat as new element

// clone reused vnode

// reuse element for static trees.

// note we only do this if the vnode is cloned -

// if the new node is not cloned it means the render functions have been

// reset by the hot-reload-api and we need to do a proper re-render.

// delay insert hooks for component root nodes, invoke them after the

// element is really inserted

// list of modules that can skip create hook during hydration because they

// are already rendered on the client or has no need for initialization

// Note: style is excluded because it relies on initial clone for future

// deep updates (#7063).

// Note: this is a browser-only function so we can assume elms are DOM nodes.

// assert node match

// child component. it should have hydrated its own tree.

// empty element, allow client to pick up and populate children

// v-html and domProps: innerHTML

// iterate and compare children lists

// if childNode is not null, it means the actual childNodes list is

// longer than the virtual children list.

// ensure collecting deps for deep class bindings for future updates

// empty mount (likely as component), create new root element

// patch existing root node

// mounting to a real element

// check if this is server-rendered content and if we can perform

// a successful hydration.

// either not server-rendered, or hydration failed.

// create an empty node and replace it

// replacing existing element

// update parent placeholder node element, recursively

// create new node

// extremely rare edge case: do not insert if old element is in a

// leaving transition. Only happens when combining transition +

// keep-alive + HOCs. (#4590)

// #6513

// invoke insert hooks that may have been merged by create hooks.

// e.g. for directives that uses the "inserted" hook.

// start at index 1 to avoid re-invoking component mounted hook

// destroy old node

/**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

// http://www.matts411.com/post/internet-explorer-9-oninput/

// #6903

// Safari < 10.2 & UIWebView doesn't fire compositionend when

// switching focus before confirming composition choice

// this also fixes the issue where some browsers e.g. iOS Chrome

// fires "change" instead of "input" on autocomplete.

// in case the options rendered by v-for have changed,

// it's possible that the value is out-of-sync with the rendered options.

// detect such cases and filter out values that no longer has a matching

// option in the DOM.

// trigger change event if

// no matching option found for at least one value

// prevent triggering an input event for no reason

// recursively search for possible transition defined inside the component root

// in case the child is also an abstract component, e.g. <keep-alive>

// we want to recursively retrieve the real component to be rendered

// props

// events.

// extract listeners and pass them directly to the transition methods

// filter out text nodes (possible whitespaces)

// warn multiple elements

// warn invalid mode

// if this is a component root node and the component's

// parent container node also has transition, skip.

// apply transition data to child

// use getRealChild() to ignore abstract components e.g. keep-alive

// ensure a key that is unique to the vnode type and to this transition

// component instance. This key will be used to remove pending leaving nodes

// during entering.

// mark v-show

// so that the transition module can hand over the control to the directive

// replace old child transition data with fresh one

// important for dynamic transitions!

// handle transition mode

// return placeholder node and queue update when leave finishes

// force removing pass

// hydrating

// we divide the work into three loops to avoid mixing DOM reads and writes

// in each iteration - which helps prevent layout thrashing.

// force reflow to put everything in position

// assign to this to avoid being removed in tree-shaking

// Detect whether an element with the move class applied has

// CSS transitions. Since the element may be inside an entering

// transition at this very moment, we make a clone of it and remove

// all other transition classes applied to ensure only the move class

// is applied.

// install platform specific utils

// install platform runtime directives & components

// install platform patch function

// public mount method

// we set this to vm._watcher inside the watcher's constructor

// since the watcher's initial patch may call $forceUpdate (e.g. inside child

// component's mounted hook), which relies on vm._watcher being already defined

/* isRenderWatcher */

// manually mounted instance, call mounted on self

// mounted is called for render-created child components in its inserted hook

// devtools global hook

// push text token

// tag token

/* getStatic */

// for script (e.g. type="x/template") or style, do not decode content

/**
   * Convert HTML string to AST.
   */

// tree management

// allow root elements with v-if, v-else-if and v-else

// keep it in the children list so that v-else(-if) conditions can

// find it as the prev node.

// final children cleanup

// filter out scoped slots

// remove trailing whitespace node again

// check pre state

// apply post-transforms

// remove trailing whitespace node

// Make sure we're not in a plaintext content element like script/style

// Comment:

// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment

// Doctype:

// End tag:

// Start tag:

// < in plain text, be forgiving and treat it as text

// Clean up any remaining tags

// Find the closest opened tag of the same type

// If no tag name is provided, clean shop

// Close all the open elements, up the stack

// Remove the open elements from the stack

// check namespace.

// inherit parent ns if there is one

// handle IE svg bug

// apply pre-transforms

// non root node in pre blocks with no attributes

// structural directives

// handle content being passed to a component as slot,

// e.g. <template slot="xxx">, <div slot-scope="xxx">

// pop stack

// IE textarea placeholder bug

// condense consecutive whitespaces into single space

// adding anyting as a sibling to the root node is forbidden

// comments should still be allowed, but ignored

/* tip */

// determine whether this is a plain element after

// removing structural attributes

// slot="xxx"

// preserve slot as an attribute for native shadow DOM compat

// only for non-scoped slots.

// 2.6 v-slot syntax

// v-slot on <template>

// v-slot on component, denotes default slot

// add the component's children to its default slot

// remove children as they are returned from scopedSlots now

// mark el non-plain so data gets generated

// handle <slot/> outlets

// mark element as dynamic

// support .foo shorthand syntax for the .prop modifier

// modifiers

// v-bind

// handler w/ dynamic event name

// v-on

// parse arg

// normal directives

// #6887 firefox doesn't update muted state if set via attribute

// even immediately after element creation

// process for on the main node

// prevent it from double-processed

// 2. add radio else-if condition

// 3. other

// inputs with type="file" are read only and setting the input's

// value will throw an error.

// component v-model doesn't need extra runtime

// ensure runtime directive metadata

/**
   * Generate a string containing static keys from compiler modules.
   */

/**
   * Goal of the optimizer: walk the generated template AST tree
   * and detect sub-trees that are purely static, i.e. parts of
   * the DOM that never needs to change.
   *
   * Once we detect these sub-trees, we can:
   *
   * 1. Hoist them into constants, so that we no longer need to
   *    create fresh nodes for them on each re-render;
   * 2. Completely skip them in the patching process.
   */

// first pass: mark all non-static nodes.

// do not make component slot content static. this avoids

// 1. components not able to mutate slot nodes

// 2. static slot content fails for hot-reloading

// second pass: mark static roots.

// For a node to qualify as a static root, it should have children that

// are not just static text. Otherwise the cost of hoisting out will

// outweigh the benefits and it's better off to just always render it fresh.

// not a built-in

// #7880: IE11 and Edge use `Esc` for Escape key name.

// #9112: IE11 uses `Spacebar` for Space key name.

// #7806: IE11 uses key names without `Arrow` prefix for arrow keys.

// #9112: IE11 uses `Del` for Delete key name.

// left/right

// make sure the key filters only apply to KeyboardEvents

// #9441: can't use 'keyCode' in $event because Chrome autofill fires fake

// key events that do not have keyCode property...

// Make sure modifiers like prevent and stop get executed after key filtering

// slot props are camelized

// componentName is el.component, take it as argument to shun flow's pessimistic refinement

// component or element

// module transforms

// hoist static sub-trees out

// Some elements (templates) need to behave differently inside of a v-pre

// node.  All pre nodes are static roots, so we can use this as a location to

// wrap a state change and reset it upon exiting the pre node.

// v-once

// avoid recursion

// v-if with v-once should generate code like (a)?_m(0):_m(1)

// compile-time directive that manipulates AST.

// returns true if it also needs a runtime counterpart.

// directives first.

// directives may mutate the el's other properties before they are generated.

// key

// ref

// pre

// record original tag name for components using "is" attribute

// module data generation functions

// inline-template

// DOM props

// event handlers

// slot target

// only for non-scoped slots

// scoped slots

// by default scoped slots are considered "stable", this allows child

// components with only scoped slots to skip forced updates from parent.

// but in some cases we have to bail-out of this optimization

// for example if the slot contains dynamic names, has v-if or v-for on them...

// #9534: if a component with scoped slots is inside a conditional branch,

// it's possible for the same component to be reused but with different

// compiled slot content. To avoid that, we generate a unique key based on

// the generated code of all the slot contents.

// OR when it is inside another scoped slot or v-for (the reactivity may be

// disconnected due to the intermediate scope variable)

// #9438, #9506

// TODO: this can be further optimized by properly analyzing in-scope bindings

// and skip force updating ones that do not actually use scope variables.

// component v-model

// v-bind dynamic argument wrap

// v-bind with dynamic arguments must be applied using the same v-bind object

// merge helper so that class/style/mustUseProp attrs are handled correctly.

// v-bind data wrap

// v-on data wrap

// optimize single v-for

// determine the normalization needed for the children array.

// 0: no normalization needed

// 1: simple normalization needed (possible 1-level deep nested array)

// 2: full normalization needed

// #3895, #4268

// these keywords should not appear inside expressions, but operators like

// typeof, instanceof and in are allowed

// these unary operators should not be used as property/method names

// detect problematic expressions in a template

// detect possible CSP restriction

// check cache

// compile

// check compilation errors/tips

// push underline

// turn code into functions

// `createCompilerCreator` allows creating compilers that use alternative

// parser/optimizer/codegen, e.g the SSR optimizing compiler.

// Here we just export a default compiler using the default parts.

// merge custom modules

// copy other options

// merge custom directives

// #3663: IE encodes newlines inside attribute values while other browsers don't

// #6828: chrome encodes content in a[href]

// resolve template/el and convert to render function

/**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

// module.parent = undefined by default
